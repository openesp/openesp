// Build file for Solr as part of OpenESP
def fullName = "solr-${solrVersion}"
def majorVersion = solrVersion.substring(0,solrVersion.lastIndexOf("."))
def refGuideName = "apache-solr-ref-guide-${majorVersion}.pdf"
def binUrl = "$apacheMirrorBase/lucene/solr/$solrVersion/${fullName}.zip"
def refGuideUrl = "$apacheMirrorBase/lucene/solr/ref-guide/${refGuideName}"
def buildDir = 'build'
def zipName = "${fullName}.zip"
def zipPath = "${tmpDir}/${zipName}"
def unzippedPath = "${buildDir}/${fullName}"
def webappPath = "${unzippedPath}/server/solr-webapp/webapp"
def deployDir = "${buildDir}/openesp"

defaultTasks 'organizeForOpenESP' 

task clean {
	doLast {
		delete buildDir
	} 
}

task init {
	outputs.dir buildDir
	doLast {
		mkdir buildDir
	}
}

task getSolr (dependsOn: 'init') {
	outputs.file "${zipPath}"
	doLast {
    println "Downloading Solr from ${binUrl} into ${tmpDir}"
		ant {
			get src:binUrl,
			dest:tmpDir, verbose:"false"
		}
	}
}

task getSolrRefGuide (dependsOn: 'init') {
	outputs.file "${tmpDir}/${refGuideName}"
	doLast {
		println "Downloading Solr reference guide ${majorVersion} into ${tmpDir}"
		try {
			ant {
				get src:refGuideUrl,
				dest:tmpDir, verbose:"false"
			}
		} catch (Exception e) {
			println "Warning: Did not find Solr reference guide - maybe it is not released yet?"
		}
	}
}

task unpackSolr (dependsOn: 'getSolr') {
	outputs.dir "${unzippedPath}"
	doLast {
    println "Unpacking Solr into ${buildDir}"
		copy {
			from zipTree(zipPath)
			into "${buildDir}"
		}
	}
}

task organizeForOpenESP (dependsOn: ['unpackSolr','getSolrRefGuide']) {
	outputs.file "${deployDir}/tomcat/conf/Catalina/localhost/solr.xml"
	outputs.file "${deployDir}/doc/${solrGuideName}"
	doLast {
		copy {
			from webappPath
			into "${deployDir}/webapps/solr"
		}
		copy {
			from 'solr-tomcat-context.xml'
			into "${deployDir}/tomcat/conf/Catalina/localhost"
			rename 'solr-tomcat-context.xml', "solr.xml"
		}
		copy {
			from "${unzippedPath}/server/solr"
			into "${deployDir}/conf/solr"
		}
		copy {
			from ("${unzippedPath}/dist") {
			  include '*.jar'
			}
			into "${deployDir}/lib/solr"
		}
		copy {
			from ("${unzippedPath}/contrib/") {
			  include '**/*.jar'
			}
			includeEmptyDirs = false
			into "${deployDir}/lib/solr"
			eachFile {details ->
        // Top Level Modules
        def targetPath = flatten(details.path)
        details.path = targetPath
      }
    }
		copy {
			from "${unzippedPath}/example/exampledocs/post.jar"
			into "${deployDir}/bin"
		}
		// Issue #29, upgrade to Solr 4.3 - need slf4j and log4j init
		copy {
			from "${unzippedPath}/server/lib/ext"
			into "${deployDir}/tomcat/lib/logging"
		}
		copy {
			from "${tmpDir}/${refGuideName}"
			into "${deployDir}/doc"
			rename refGuideName, solrGuideName
		}
		new File("${deployDir}/logs/solr").mkdirs()
	}
}

def flatten(def path) {
  // Standard case modules/name/src -> module-name/src
  def modified=path.replaceAll('.*/(.*)$', '$1')
  return modified
}
