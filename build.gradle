//
// OpenESP build definition
// Simply run 'gradle' to build it all
//
import org.apache.tools.ant.filters.ReplaceTokens

project.version = openEspVersion
apply plugin: 'java'
project.ext.basename = "openesp"

project.ext.set("tmpDir", "${rootDir}/tmp")
def apacheMirrorBase = (new URL("http://www.apache.org/dyn/closer.lua")
    .getText().find("<strong>(.*?)</strong>") { match, url -> return url }).minus(~/\/$/)
project.ext.set("apacheMirrorBase", "${apacheMirrorBase}")
def deployDir = "build/openesp"
def tomcatName = "apache-tomcat-${tomcatVersion}"
def architecture = "-windows-x64"
def tomcatUrl = "$apacheMirrorBase/tomcat/tomcat-${tomcatVersion.split("\\.")[0]}/v${tomcatVersion}/bin/${tomcatName}${architecture}.zip"
def tomcatDir = "${deployDir}/tomcat"

println "OpenESP version " + openEspVersion + 
        " with zookeeper " + zookeeperVersion + 
        " with tomcat " + tomcatVersion + 
        ", Solr " + solrVersion + 
        ", ManifoldCF " + mcfVersion +
        ", SolrMeter " + solrmeterVersion +
        ", Vifun " + vifunVersion
println "TEMP dir: " + tmpDir
println "Apache mirror for downloads: " + apacheMirrorBase

defaultTasks 'dist' 

task cleanTemp { 
  doLast {
    println "Cleaning temp files"
    delete tmpDir
  }
}

task init {
    outputs.file 'build/openesp/version.properties'
    outputs.dir tmpDir
    doLast {
      mkdir deployDir
      mkdir "${tmpDir}"
      copy {
        from 'initial'
        into "${deployDir}"
      }
      println "Creating versions file"
      def fields = ["openesp.version":openEspVersion, "solr.version":solrVersion, "tomcat.version":tomcatVersion, "mcf.version":mcfVersion, "solrmeter.version":solrmeterVersion, "vifun.version":vifunVersion]
      new File("${deployDir}/version.properties").withWriter { out ->
          fields.each() { key, value ->
              out.writeLine("${key} = ${value}")
          }
      }
    }
}

task getTomcat (dependsOn: 'init'){
  def tomcatZipFile = "${tmpDir}/${tomcatName}.zip"
  outputs.file tomcatZipFile
  doLast {
    println "Downloading Tomcat from ${tomcatUrl} to ${tmpDir}"
    ant {
      get src:tomcatUrl,
      dest:tomcatZipFile, verbose:"false"
    }
  }
}

task deployTomcat (dependsOn: 'getTomcat') {
  def tomcatZipFile = "${tmpDir}/${tomcatName}.zip"
  def tomcatFromDir = "${deployDir}/${tomcatName}"
  def tomcatToDir = "${tomcatDir}"
  doLast {
    println "Unpacking Tomcat from ${tomcatZipFile} into ${deployDir}"
    copy {
      from zipTree(tomcatZipFile)
      into "${deployDir}"
    }
    println "Renaming ${tomcatFromDir} to ${tomcatToDir}"
    delete tomcatToDir
    new File(tomcatFromDir).renameTo(new File(tomcatToDir))    
    ant.chmod(dir: "${deployDir}/tomcat/bin", perm: '755', includes: '*')
  }
}

task deploySolr (dependsOn: [':openesp-solr:organizeForOpenESP', 'deployTomcat']) {
  outputs.file "${deployDir}/bin/post.jar"
  doLast {
    println "Deploying Solr into ${deployDir}"
    copy {
      from "openesp-solr/build/openesp"
      into "${deployDir}"
    }
  }
}

task deployMcf (dependsOn: [':openesp-mcf:organizeForOpenESP', 'deployTomcat']) {
//  outputs.file "${deployDir}/conf/mcf/properties.xml"
  doLast {
    println "Deploying MCF into ${deployDir}"
    copy {
      from "openesp-mcf/build/openesp"
      into "${deployDir}"
    }
  }
}

task deployZookeeper (dependsOn: [':openesp-zookeeper:organizeForOpenESP', 'deployTomcat']) {
//  outputs.file "${deployDir}/conf/mcf/properties.xml"
  doLast {
    println "Deploying Zookeeper into ${deployDir}"
    copy {
      from "openesp-zookeeper/build/openesp"
      into "${deployDir}"
    }
  }
}

task deploySolrMeter (dependsOn: [':openesp-solrmeter:organizeForOpenESP', 'deployTomcat']) {
//  outputs.file "${deployDir}/conf/mcf/properties.xml"
  doLast {
    println "Deploying SolrMeter into ${deployDir}"
    copy {
      from "openesp-solrmeter/build"
      into "${deployDir}/bundle"
    }
  }
}

task deployVifun (dependsOn: [':openesp-vifun:organizeForOpenESP', 'deployTomcat']) {
//  outputs.file "${deployDir}/conf/mcf/properties.xml"
  doLast {
    println "Deploying Vifun into ${deployDir}"
    copy {
      from "openesp-vifun/build"
      into "${deployDir}/bundle"
    }
  }
}

task deployAdmin (dependsOn: [':openesp-admin:organizeForOpenESP', 'deployTomcat']) {
  doLast {
    println "Deploying Admin webapp into ${deployDir}"
    copy {
      from "openesp-admin/build/openesp"
      into "${deployDir}"
    }
    copy {
      from "${deployDir}/doc"
      into "${deployDir}/webapps/openesp-admin/"
    }
  }
}

task deployServiceWrapper (dependsOn: ['deployTomcat']) {
  doLast {
    println "Copying service wrappers from ${tomcatDir}/bin into bin folder"
    copy {
      from "${tomcatDir}/bin"
      include '**/*.exe'
      rename "tomcat${tomcatVersion.split("\\.")[0]}(.*)", 'OpenESP$1'
      into "${deployDir}/bin"
    }
  }
}

task deployOverlay (dependsOn: ['deploySolr', 'deployMcf', 'deployAdmin', 'deployTomcat', 'deploySolrMeter', 'deployVifun', 'deployZookeeper']) {
  doLast {
    println "Deploying overlay to ${deployDir}"
    copy {
      from 'overlay'
      into "${deployDir}"
    }
  }
}

task bld (dependsOn: ['deployServiceWrapper', 'deployOverlay']) {
  doLast {
    println "Project compiled into ${deployDir}"
  }
}

task doZip (type: Zip, dependsOn: 'bld') {
  outputs.file "${doZip.archiveName}"
  from "build"
  include 'openesp/**'
  doLast {
    println "Packaging into ZIP ${doZip.archiveName}"
  }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.2'
}

task dist (dependsOn: 'doZip') {
  doLast {
    println "Done generating zip distro, please check build/distributions"
  }
}

task installer (dependsOn: ['dist', 'openesp-installer:installer']) {
  doLast {
    copy {
      from 'openesp-installer/build/dist'
      into "build/distributions"
    }
    println 'Done generating jar and exe installers, please check build/distributions'
  }
}